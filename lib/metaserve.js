// Generated by CoffeeScript 1.10.0
(function() {
  var BASE_DIR, CSS_COMPILER, DEFAULT_BASE_DIR, DEFAULT_COMPILERS, HOST, HTML_COMPILER, JS_COMPILER, PORT, VERBOSE, app, argv, bouncedExtension, compilers, de_res, express, filename, fs, isArray, isString, metaserve, metaserve_compile, options, url;

  fs = require('fs');

  url = require('url');

  de_res = function(n) {
    return Math.floor(n / 1000) * 1000;
  };

  isArray = function(a) {
    return Array.isArray(a);
  };

  isString = function(s) {
    return typeof s === 'string';
  };

  bouncedExtension = function(filename) {
    var parts;
    parts = filename.split('.');
    parts.splice(-1, 0, 'bounced');
    return parts.join('.');
  };

  VERBOSE = process.env.METASERVE_VERBOSE != null;

  DEFAULT_BASE_DIR = './static';

  DEFAULT_COMPILERS = function() {
    return {
      html: require('metaserve-html-jade')(),
      js: require('metaserve-js-coffee-reactify')(),
      css: require('metaserve-css-styl')()
    };
  };

  module.exports = metaserve = function(options) {
    if (options == null) {
      options = {};
    }
    if (isString(options)) {
      options = {
        base_dir: options
      };
    }
    options.base_dir || (options.base_dir = DEFAULT_BASE_DIR);
    options.compilers || (options.compilers = DEFAULT_COMPILERS());
    return function(req, res, next) {
      var file_url;
      file_url = url.parse(req.url).pathname;
      if (file_url.slice(-1)[0] === '/') {
        file_url += 'index.html';
      }
      return metaserve_compile(file_url, options, function(err, response) {
        var filename;
        if (err) {
          return res.send(500, err);
        } else if (typeof response === 'string') {
          if (file_url.endsWith('.js')) {
            res.setHeader('Content-Type', 'text/javascript');
          }
          if (file_url.endsWith('.css')) {
            res.setHeader('Content-Type', 'text/css');
          }
          return res.end(response);
        } else if (response != null ? response.compiled : void 0) {
          if (response.content_type) {
            res.setHeader('Content-Type', response.content_type);
          }
          return res.end(response.compiled);
        } else {
          filename = options.base_dir + file_url;
          if (fs.existsSync(filename)) {
            if (VERBOSE) {
              console.log('[normalserve] Falling back with ' + filename);
            }
            return res.sendfile(filename);
          } else {
            if (VERBOSE) {
              console.log('[normalserve] Could not find ' + filename);
            }
            return next();
          }
        }
      });
    };
  };

  metaserve_compile = function(file_url, options, cb) {
    var base_dir, compiler, compilers, ext, filename, filename_stem, i, len, matched, ref, ref1, url_match;
    ref = options.compilers;
    for (url_match in ref) {
      compilers = ref[url_match];
      if (!url_match.match('\/')) {
        url_match = '\/(.*)\.' + url_match;
      }
      url_match = new RegExp(url_match);
      if (!isArray(compilers)) {
        compilers = [compilers];
      }
      compilers = compilers.filter(function(c) {
        return c != null;
      });
      if (matched = file_url.match(url_match)) {
        for (i = 0, len = compilers.length; i < len; i++) {
          compiler = compilers[i];
          ref1 = compiler.options, base_dir = ref1.base_dir, ext = ref1.ext;
          base_dir || (base_dir = options.base_dir);
          filename_stem = matched[1];
          filename = base_dir + '/' + filename_stem + '.' + ext;
          if (fs.existsSync(filename)) {
            if (compiler.shouldCompile != null) {
              if (!compiler.shouldCompile(filename)) {
                if (VERBOSE) {
                  console.log("[metaserve] Skipping compiler for " + filename);
                }
                continue;
              }
            }
            if (VERBOSE) {
              console.log("[metaserve] Using compiler for " + file_url + " (" + filename + ")");
            }
            return compiler.compile(filename, cb);
          } else {
            if (VERBOSE) {
              console.log("[metaserve] File not found for " + filename);
            }
          }
        }
      }
    }
    return cb(null);
  };

  if (require.main === module) {
    express = require('express');
    argv = require('minimist')(process.argv);
    HOST = argv.host || process.env.METASERVE_HOST || '0.0.0.0';
    PORT = argv.port || process.env.METASERVE_PORT || 8000;
    BASE_DIR = argv['base-dir'] || process.env.METASERVE_BASE_DIR || './static';
    HTML_COMPILER = argv.html || 'jade';
    JS_COMPILER = argv.js || 'coffee-reactify';
    CSS_COMPILER = argv.css || 'styl';
    compilers = {
      html: require("metaserve-html-" + HTML_COMPILER)(),
      js: require("metaserve-js-" + JS_COMPILER)(),
      css: require("metaserve-css-" + CSS_COMPILER)()
    };
    options = {
      base_dir: BASE_DIR,
      compilers: compilers
    };
    if (filename = argv.bounce) {
      console.log("[metaserve] Bouncing " + filename + " ...");
      metaserve_compile(filename, options, function(err, response) {
        var bounced_filename;
        if (response != null ? response.compiled : void 0) {
          bounced_filename = bouncedExtension(filename);
          fs.writeFileSync(BASE_DIR + bounced_filename, response.compiled);
          return console.log("[metaserve] Wrote to " + bounced_filename);
        } else {
          return console.log("[metaserve] Bouncing failed", err);
        }
      });
    } else {
      app = express();
      app.use(metaserve(options));
      app.listen(PORT, HOST, function() {
        return console.log("Metaserving on http://" + HOST + ":" + PORT + "/");
      });
    }
  }

}).call(this);
